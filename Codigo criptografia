import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.swing.*;
import java.util.Base64;

public class CriptografiaAES {
    public static void main(String[] args) {
        try {
            // Gerar uma chave secreta AES de 128 bits
            KeyGenerator generator = KeyGenerator.getInstance("AES");
            generator.init(128);
            SecretKey chave = generator.generateKey();

            // Interface gráfica para inserir a mensagem
            String inputMessage = JOptionPane.showInputDialog("Por favor, insira a mensagem para criptografar:");

            // Criptografando a mensagem
            String encryptedMessage = encrypt(inputMessage, chave);
            JOptionPane.showMessageDialog(null, "Mensagem Criptografada:\n" + encryptedMessage);

            // Descriptografando a mensagem
            String decryptedMessage = decrypt(encryptedMessage, chave);
            JOptionPane.showMessageDialog(null, "Mensagem Descriptografada:\n" + decryptedMessage);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro: " + e.getMessage());
        }
    }

    // Método para criptografar o texto com a chave fornecida
    public static String encrypt(String text, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] encryptedBytes = cipher.doFinal(text.getBytes());
        return Base64.getEncoder().encodeToString(encryptedBytes);
    }

    // Método para descriptografar o texto criptografado com a chave fornecida
    public static String decrypt(String encryptedText, SecretKey key) throws Exception {
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, key);
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedText);
        byte[] decryptedBytes = cipher.doFinal(decodedBytes);
        return new String(decryptedBytes);
    }
}
